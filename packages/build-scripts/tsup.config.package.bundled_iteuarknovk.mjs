// ../build-scripts/tsup.config.package.ts
import { defineConfig } from "tsup";

// ../build-scripts/getBaseConfig.ts
import { env } from "node:process";
import browsersListToEsBuild from "browserslist-to-esbuild";

// ../build-scripts/dev-flag.ts
import { readFile } from "fs/promises";
import jscodeshift from "jscodeshift";
function replaceDev(source) {
  if (/__DEV__/.test(source) !== true) {
    return source;
  }
  const j = jscodeshift.withParser("tsx");
  const root = j(source);
  root.find(j.Identifier, { name: "__DEV__" }).replaceWith(
    () => j.binaryExpression(
      "!==",
      j.memberExpression(
        j.memberExpression(j.identifier("process"), j.identifier("env")),
        j.identifier("NODE_ENV")
      ),
      j.stringLiteral("production")
    )
  );
  return root.toSource();
}
var DevFlagPlugin = {
  name: "dev-flag-plugin",
  setup(build) {
    build.onLoad({ filter: /\.(t|j)sx?$/, namespace: "file" }, async ({ path }) => {
      const contents = await readFile(path, "utf-8");
      const ext = path.slice(path.lastIndexOf(".") + 1);
      const loader = ext.match(/(j|t)sx?$/) ? ext : "js";
      return {
        contents: replaceDev(contents),
        loader
      };
    });
  }
};

// ../build-scripts/getBaseConfig.ts
var BROWSERSLIST_TARGETS = browsersListToEsBuild();
function getBaseConfig(platform, formats, _options) {
  return [true, false].flatMap(
    (isDebugBuild) => formats.map(
      (format) => format !== "iife" && isDebugBuild ? null : {
        define: {
          __BROWSER__: `${platform === "browser"}`,
          __NODEJS__: `${platform === "node"}`,
          __REACTNATIVE__: `${platform === "native"}`,
          __VERSION__: `"${env.npm_package_version}"`
        },
        entry: [`./src/index.ts`],
        esbuildOptions(options, context) {
          const { format: format2 } = context;
          options.minify = format2 === "iife" && !isDebugBuild;
          if (format2 === "iife") {
            options.define = {
              ...options.define,
              __DEV__: `${isDebugBuild}`
            };
            options.target = BROWSERSLIST_TARGETS;
          } else {
            options.define = {
              ...options.define,
              // Preserve `process.env.NODE_ENV` in the output without
              // replacing it. This allows consumers' bundlers to replace it
              // as they see fit.
              "process.env.NODE_ENV": "process.env.NODE_ENV"
            };
          }
        },
        esbuildPlugins: [DevFlagPlugin],
        external: [
          // // Despite inlining `@solana/text-encoding-impl`, do not recursively inline `fastestsmallesttextencoderdecoder`.
          // 'fastestsmallesttextencoderdecoder',
          // // Despite inlining `@solana/ws-impl`, do not recursively inline `ws`.
          // 'ws',
        ],
        format,
        globalName: "globalThis.solanaWeb3",
        name: platform,
        // Inline private, non-published packages.
        // WARNING: This inlines packages recursively. Make sure these don't have deep dep trees.
        noExternal: [
          // @noble/ed25519 is an ESM-only module, so we have to inline it in CJS builds.
          // ...(format === 'cjs' ? ['@noble/ed25519'] : []),
          // '@solana/crypto-impl',
          // '@solana/event-target-impl',
          // '@solana/text-encoding-impl',
          // '@solana/ws-impl',
        ],
        outExtension({ format: format2 }) {
          let extension;
          if (format2 === "iife") {
            extension = `.${isDebugBuild ? "development" : "production.min"}.js`;
          } else {
            extension = `.${platform}.${format2 === "cjs" ? "cjs" : "mjs"}`;
          }
          return {
            js: extension
          };
        },
        platform: platform === "node" ? "node" : "browser",
        pure: ["process"],
        sourcemap: format !== "iife" || isDebugBuild,
        treeshake: true
      }
    )
  ).filter(Boolean);
}

// ../build-scripts/tsup.config.package.ts
var tsup_config_package_default = defineConfig((options) => [
  ...getBaseConfig("node", ["cjs", "esm"], options),
  ...getBaseConfig("browser", ["cjs", "esm"], options),
  ...getBaseConfig("native", ["esm"], options)
]);
export {
  tsup_config_package_default as default
};
//# sourceMappingURL=data:application/json;base64,
